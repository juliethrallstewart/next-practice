{"ast":null,"code":"var _jsxFileName = \"/Users/juliethrall/Desktop/Lambda/next-practice/pages/p/[id].jsx\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Layout from '../../comps/MyLayout';\nimport Markdown from 'react-markdown'; //using markdown for styling\n\nexport default (() => {\n  const router = useRouter();\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    className: \"jsx-1734074091\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, router.query.id), __jsx(\"div\", {\n    className: \"jsx-1734074091\" + \" \" + \"markdown\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, __jsx(Markdown, {\n    source: `\n  This is our blog post.\n  Yes. We can have a [link](/link).\n  And we can have a title as well.\n  \n  ### This is a title\n  \n  And here's the content.\n        `,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  })), __jsx(_JSXStyle, {\n    id: \"1734074091\",\n    __self: this\n  }, \".markdown{font-family:'Arial';}.markdown a{-webkit-text-decoration:none;text-decoration:none;color:blue;}.markdown a:hover{opacity:0.6;}.markdown h3{margin:0;padding:0;text-transform:uppercase;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qdWxpZXRocmFsbC9EZXNrdG9wL0xhbWJkYS9uZXh0LXByYWN0aWNlL3BhZ2VzL3AvW2lkXS5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0IyQixBQUdpQyxBQUlDLEFBS1QsQUFJSCxTQUNDLEdBSlosT0FLMkIsQ0FkM0Isd0JBZUEsTUFYYSxXQUNiIiwiZmlsZSI6Ii9Vc2Vycy9qdWxpZXRocmFsbC9EZXNrdG9wL0xhbWJkYS9uZXh0LXByYWN0aWNlL3BhZ2VzL3AvW2lkXS5qc3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSb3V0ZXIgfSBmcm9tICduZXh0L3JvdXRlcic7XG5pbXBvcnQgTGF5b3V0IGZyb20gJy4uLy4uL2NvbXBzL015TGF5b3V0JztcbmltcG9ydCBNYXJrZG93biBmcm9tICdyZWFjdC1tYXJrZG93bic7XG5cbi8vdXNpbmcgbWFya2Rvd24gZm9yIHN0eWxpbmdcblxuZXhwb3J0IGRlZmF1bHQgKCkgPT4ge1xuICAgIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuICAgIHJldHVybiAoXG4gICAgICA8TGF5b3V0PlxuICAgICAgICA8aDE+e3JvdXRlci5xdWVyeS5pZH08L2gxPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1hcmtkb3duXCI+XG4gICAgICAgICAgPE1hcmtkb3duXG4gICAgICAgICAgICBzb3VyY2U9e2BcbiAgVGhpcyBpcyBvdXIgYmxvZyBwb3N0LlxuICBZZXMuIFdlIGNhbiBoYXZlIGEgW2xpbmtdKC9saW5rKS5cbiAgQW5kIHdlIGNhbiBoYXZlIGEgdGl0bGUgYXMgd2VsbC5cbiAgXG4gICMjIyBUaGlzIGlzIGEgdGl0bGVcbiAgXG4gIEFuZCBoZXJlJ3MgdGhlIGNvbnRlbnQuXG4gICAgICAgIGB9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPntgXG4gICAgICAgICAgLm1hcmtkb3duIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnQXJpYWwnO1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgLm1hcmtkb3duIGEge1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgY29sb3I6IGJsdWU7XG4gICAgICAgICAgfVxuICBcbiAgICAgICAgICAubWFya2Rvd24gYTpob3ZlciB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwLjY7XG4gICAgICAgICAgfVxuICBcbiAgICAgICAgICAubWFya2Rvd24gaDMge1xuICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L0xheW91dD5cbiAgICApO1xuICB9O1xuXG4vL2V4YW1wbGUgdXNpbmcgZmV0Y2ggdG8gbWFwIHByb3BzXG4vLyBjb25zdCBQb3N0ID0gcHJvcHMgPT4gKFxuLy8gICA8TGF5b3V0PlxuLy8gICAgIDxoMT57cHJvcHMuc2hvdy5uYW1lfTwvaDE+XG4vLyAgICAgPHA+e3Byb3BzLnNob3cuc3VtbWFyeS5yZXBsYWNlKC88Wy9dP3A+L2csICcnKX08L3A+XG4vLyAgICAgPGltZyBzcmM9e3Byb3BzLnNob3cuaW1hZ2UubWVkaXVtfSAvPlxuLy8gICA8L0xheW91dD5cbi8vICk7XG5cbi8vIFBvc3QuZ2V0SW5pdGlhbFByb3BzID0gYXN5bmMgZnVuY3Rpb24oY29udGV4dCkge1xuLy8gICBjb25zdCB7IGlkIH0gPSBjb250ZXh0LnF1ZXJ5O1xuLy8gICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGkudHZtYXplLmNvbS9zaG93cy8ke2lkfWApO1xuLy8gICBjb25zdCBzaG93ID0gYXdhaXQgcmVzLmpzb24oKTtcblxuLy8gICBjb25zb2xlLmxvZyhgRmV0Y2hlZCBzaG93OiAke3Nob3cubmFtZX1gKTtcblxuLy8gICByZXR1cm4geyBzaG93IH07XG4vLyB9O1xuXG4vLyBleHBvcnQgZGVmYXVsdCBQb3N0O1xuXG4vLyAvL2V4YW1wbGUgb2YgZHluYW1pYyByb3V0aW5nIHdpdGggaWRcbi8vIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBvc3QoKSB7XG4vLyAgIGNvbnN0IHJvdXRlciA9IHVzZVJvdXRlcigpO1xuXG4vLyAgIHJldHVybiAoXG4vLyAgICAgPExheW91dD5cbi8vICAgICAgIDxoMT57cm91dGVyLnF1ZXJ5LmlkfTwvaDE+XG4vLyAgICAgICA8cD5UaGlzIGlzIHRoZSBibG9nIHBvc3QgY29udGVudC48L3A+XG4vLyAgICAgPC9MYXlvdXQ+XG4vLyAgICk7XG4vLyB9Il19 */\\n/*@ sourceURL=/Users/juliethrall/Desktop/Lambda/next-practice/pages/p/[id].jsx */\"));\n}); //example using fetch to map props\n// const Post = props => (\n//   <Layout>\n//     <h1>{props.show.name}</h1>\n//     <p>{props.show.summary.replace(/<[/]?p>/g, '')}</p>\n//     <img src={props.show.image.medium} />\n//   </Layout>\n// );\n// Post.getInitialProps = async function(context) {\n//   const { id } = context.query;\n//   const res = await fetch(`https://api.tvmaze.com/shows/${id}`);\n//   const show = await res.json();\n//   console.log(`Fetched show: ${show.name}`);\n//   return { show };\n// };\n// export default Post;\n// //example of dynamic routing with id\n// export default function Post() {\n//   const router = useRouter();\n//   return (\n//     <Layout>\n//       <h1>{router.query.id}</h1>\n//       <p>This is the blog post content.</p>\n//     </Layout>\n//   );\n// }","map":{"version":3,"sources":["/Users/juliethrall/Desktop/Lambda/next-practice/pages/p/[id].jsx"],"names":["useRouter","Layout","Markdown","router","query","id"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,gBAArB,C,CAEA;;AAEA,gBAAe,MAAM;AACjB,QAAMC,MAAM,GAAGH,SAAS,EAAxB;AACA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKG,MAAM,CAACC,KAAP,CAAaC,EAAlB,CADF,EAEE;AAAA,wCAAe,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,MAAM,EAAG;;;;;;;;SADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF;AAAA;AAAA;AAAA,+mGADF;AAsCD,CAxCH,E,CA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useRouter } from 'next/router';\nimport Layout from '../../comps/MyLayout';\nimport Markdown from 'react-markdown';\n\n//using markdown for styling\n\nexport default () => {\n    const router = useRouter();\n    return (\n      <Layout>\n        <h1>{router.query.id}</h1>\n        <div className=\"markdown\">\n          <Markdown\n            source={`\n  This is our blog post.\n  Yes. We can have a [link](/link).\n  And we can have a title as well.\n  \n  ### This is a title\n  \n  And here's the content.\n        `}\n          />\n        </div>\n        <style jsx global>{`\n          .markdown {\n            font-family: 'Arial';\n          }\n  \n          .markdown a {\n            text-decoration: none;\n            color: blue;\n          }\n  \n          .markdown a:hover {\n            opacity: 0.6;\n          }\n  \n          .markdown h3 {\n            margin: 0;\n            padding: 0;\n            text-transform: uppercase;\n          }\n        `}</style>\n      </Layout>\n    );\n  };\n\n//example using fetch to map props\n// const Post = props => (\n//   <Layout>\n//     <h1>{props.show.name}</h1>\n//     <p>{props.show.summary.replace(/<[/]?p>/g, '')}</p>\n//     <img src={props.show.image.medium} />\n//   </Layout>\n// );\n\n// Post.getInitialProps = async function(context) {\n//   const { id } = context.query;\n//   const res = await fetch(`https://api.tvmaze.com/shows/${id}`);\n//   const show = await res.json();\n\n//   console.log(`Fetched show: ${show.name}`);\n\n//   return { show };\n// };\n\n// export default Post;\n\n// //example of dynamic routing with id\n// export default function Post() {\n//   const router = useRouter();\n\n//   return (\n//     <Layout>\n//       <h1>{router.query.id}</h1>\n//       <p>This is the blog post content.</p>\n//     </Layout>\n//   );\n// }"]},"metadata":{},"sourceType":"module"}